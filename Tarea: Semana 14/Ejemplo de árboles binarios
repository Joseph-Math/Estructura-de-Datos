using System;

public class Nodo
{
    public string Valor { get; set; }
    public Nodo Izquierda { get; set; }
    public Nodo Derecha { get; set; }

    public Nodo(string valor)
    {
        Valor = valor;
        Izquierda = null;
        Derecha = null;
    }
}

public class ArbolBinario
{
    public Nodo Raiz { get; set; }

    public ArbolBinario()
    {
        Raiz = null;
    }

    public void Insertar(string valor)
    {
        Raiz = InsertarRecursivo(Raiz, valor);
    }

    private Nodo InsertarRecursivo(Nodo nodo, string valor)
    {
        if (nodo == null)
        {
            nodo = new Nodo(valor);
            return nodo;
        }

        if (string.Compare(valor, nodo.Valor) < 0)
        {
            nodo.Izquierda = InsertarRecursivo(nodo.Izquierda, valor);
        }
        else
        {
            nodo.Derecha = InsertarRecursivo(nodo.Derecha, valor);
        }

        return nodo;
    }

    public void Eliminar(string valor)
    {
        Raiz = EliminarRecursivo(Raiz, valor);
    }

    private Nodo EliminarRecursivo(Nodo nodo, string valor)
    {
        if (nodo == null)
        {
            return nodo;
        }

        if (string.Compare(valor, nodo.Valor) < 0)
        {
            nodo.Izquierda = EliminarRecursivo(nodo.Izquierda, valor);
        }
        else if (string.Compare(valor, nodo.Valor) > 0)
        {
            nodo.Derecha = EliminarRecursivo(nodo.Derecha, valor);
        }
        else
        {
            if (nodo.Izquierda == null)
            {
                return nodo.Derecha;
            }
            else if (nodo.Derecha == null)
            {
                return nodo.Izquierda;
            }

            nodo.Valor = MinimoValor(nodo.Derecha);
            nodo.Derecha = EliminarRecursivo(nodo.Derecha, nodo.Valor);
        }

        return nodo;
    }

    private string MinimoValor(Nodo nodo)
    {
        string minimoValor = nodo.Valor;
        while (nodo.Izquierda != null)
        {
            minimoValor = nodo.Izquierda.Valor;
            nodo = nodo.Izquierda;
        }
        return minimoValor;
    }

    public Nodo Buscar(string valor)
    {
        return BuscarRecursivo(Raiz, valor);
    }

    private Nodo BuscarRecursivo(Nodo nodo, string valor)
    {
        if (nodo == null || nodo.Valor == valor)
        {
            return nodo;
        }

        if (string.Compare(valor, nodo.Valor) < 0)
        {
            return BuscarRecursivo(nodo.Izquierda, valor);
        }
        else
        {
            return BuscarRecursivo(nodo.Derecha, valor);
        }
    }

    public void PreOrden(Nodo nodo)
    {
        if (nodo != null)
        {
            Console.Write(nodo.Valor + " ");
            PreOrden(nodo.Izquierda);
            PreOrden(nodo.Derecha);
        }
    }

    public void InOrden(Nodo nodo)
    {
        if (nodo != null)
        {
            InOrden(nodo.Izquierda);
            Console.Write(nodo.Valor + " ");
            InOrden(nodo.Derecha);
        }
    }

    public void PostOrden(Nodo nodo)
    {
        if (nodo != null)
        {
            PostOrden(nodo.Izquierda);
            PostOrden(nodo.Derecha);
            Console.Write(nodo.Valor + " ");
        }
    }
}

public class Programa
{
    public static void Main(string[] args)
    {
        ArbolBinario arbol = new ArbolBinario();
        string opcion;

        do
        {
            Console.WriteLine("\n--- Menú ---");
            Console.WriteLine("1. Insertar nodo");
            Console.WriteLine("2. Eliminar nodo");
            Console.WriteLine("3. Buscar nodo");
            Console.WriteLine("4. Recorrido Pre-Orden");
            Console.WriteLine("5. Recorrido In-Orden");
            Console.WriteLine("6. Recorrido Post-Orden");
            Console.WriteLine("7. Salir");
            Console.Write("Ingrese una opción: ");
            opcion = Console.ReadLine();

            switch (opcion)
            {
                case "1":
                    Console.Write("Ingrese el valor a insertar: ");
                    string valorInsertar = Console.ReadLine();
                    arbol.Insertar(valorInsertar);
                    break;
                case "2":
                    Console.Write("Ingrese el valor a eliminar: ");
                    string valorEliminar = Console.ReadLine();
                    arbol.Eliminar(valorEliminar);
                    break;
                case "3":
                    Console.Write("Ingrese el valor a buscar: ");
                    string valorBuscar = Console.ReadLine();
                    Nodo nodoEncontrado = arbol.Buscar(valorBuscar);
                    if (nodoEncontrado != null)
                    {
                        Console.WriteLine("Nodo encontrado: " + nodoEncontrado.Valor);
                    }
                    else
                    {
                        Console.WriteLine("Nodo no encontrado.");
                    }
                    break;
                case "4":
                    Console.Write("Recorrido Pre-Orden: ");
                    arbol.PreOrden(arbol.Raiz);
                    Console.WriteLine();
                    break;
                case "5":
                    Console.Write("Recorrido In-Orden: ");
                    arbol.InOrden(arbol.Raiz);
                    Console.WriteLine();
                    break;
                case "6":
                    Console.Write("Recorrido Post-Orden: ");
                    arbol.PostOrden(arbol.Raiz);
                    Console.WriteLine();
                    break;
                case "7":
                    Console.WriteLine("Saliendo del programa.");
                    break;
                default:
                    Console.WriteLine("Opción no válida.");
                    break;
            }
        } while (opcion != "7");
    }
}
